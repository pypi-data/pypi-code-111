import sys
import os
from pathlib import Path

__version__ = "0.3.3"

try:
    import conda
    del conda
except:
    is_conda_base = False
    is_conda = os.path.exists(os.path.join(sys.prefix, 'conda-meta'))
else:
    assert os.path.exists(os.path.join(sys.prefix, 'conda-meta'))
    is_conda_base = True
    is_conda = True

if is_conda_base and (sys.platform == 'win32'):
    msg="WARNING: You are using the Anaconda Python base environment on Windows.\n"
    msg+="WARNING: In order for the Python-embedding in dlite to work, you may need to set PYTHONHOME.\n"
    msg+="WARNING: See: https://github.com/ContinuumIO/anaconda-issues/issues/11374\n"
    print(msg)

if sys.platform == 'win32':

    # The following is only for testing the Python package after build or install
    # on the build system in case you are developing on Windows.

    # Setting DLITE_USE_BUILD_ROOT="yes" will test in the build-directory
    # Otherwise we test in the install-directory

    # When building and testing the Python package via CTest, we set the PYTHONPATH to the
    # SWIG-generated package root in the build tree. in addition, shared libraries generated
    # during the build must be accessible.
    # For Linux, we take care of this by defining LD_LIBRARY_PATH in the test-environments.

    # For Windows, the approach depends on the Python which is being used

    # (a) For Anaconda Python on Windows, it is sufficient to add the dll directories to PATH
    #     before calling Python. _dlite.pyd can then find and load the dlls it depends on. We add
    #     the paths to the dlls generated during the build to the CTest environments PATH.

    # (b) For CPython, setting the PATH is not sufficient. This may be related to the
    #     following bug recognised by the numpy cummunity: https://github.com/numpy/numpy/issues/12667
    #     For CPython: To work around, call AddDllDirectory() directly via ctypes to set the
    #     search path on Windows.
    #
    #     To complicate things, this now does not work for Anaconda Python on Windows:
    #     https://github.com/pytorch/pytorch/issues/17051
    #     And: Using Anaconda Python as embedded Python on Windows has its own issues. We
    #     must in addition set the PYTHONHOME in the CTest environment:
    #     https://github.com/pybind/pybind11/issues/2369
    #     https://github.com/ContinuumIO/anaconda-issues/issues/11374

    import os

    dlite_INSTALL_ROOT = '/io/python/build/lib.linux-x86_64-3.10'
    dlite_BUILD_ROOT = '/io/python/build/temp.linux-x86_64-3.10'

    dlite_PATH = ''
    dlite_LD_LIBRARY_PATH = '/io/python/build/temp.linux-x86_64-3.10/src;/io/python/build/temp.linux-x86_64-3.10/src/utils;/io/python/build/temp.linux-x86_64-3.10/src/pyembed'
    dlite_PYTHONPATH = '/io/python/build/temp.linux-x86_64-3.10/bindings/python'
    dlite_STORAGE_PLUGINS = '/io/python/build/temp.linux-x86_64-3.10/storages/json;/io/python/build/temp.linux-x86_64-3.10/storages/rdf;/io/python/build/temp.linux-x86_64-3.10/storages/python'
    dlite_MAPPING_PLUGINS = ''
    dlite_PYTHON_STORAGE_PLUGINS = '/io/storages/python/python-storage-plugins'
    dlite_PYTHON_MAPPING_PLUGINS = '/io/bindings/python/python-mapping-plugins'
    dlite_TEMPLATES = '/io/tools/templates'
    dlite_STORAGES='/io/examples/storages/*.json'

    def _dlite_use_build_root_for_testing():
        return 'DLITE_USE_BUILD_ROOT' in os.environ and not os.environ['DLITE_USE_BUILD_ROOT'].lower() in ('0', 'no', 'false', '.false.', 'off')

    if _dlite_use_build_root_for_testing():
        assert Path(dlite_BUILD_ROOT).is_dir()

    if not is_conda:
        from ctypes import windll, c_wchar_p
        from ctypes.wintypes import DWORD

        AddDllDirectory = windll.kernel32.AddDllDirectory
        AddDllDirectory.restype = DWORD
        AddDllDirectory.argtypes = [c_wchar_p]

        if _dlite_use_build_root_for_testing():
            for path in dlite_PATH.split(';'):
                AddDllDirectory(str(Path(path)))
        else:
            # We are on Windows, CPython and want to test our Python package
            # in the install directory
            assert (Path(dlite_INSTALL_ROOT) / 'bin').is_dir()
            AddDllDirectory(str(Path(dlite_INSTALL_ROOT) / 'bin'))

        del windll, c_wchar_p, DWORD
        del AddDllDirectory

    del dlite_INSTALL_ROOT
    del dlite_BUILD_ROOT
    del dlite_PATH
    del dlite_LD_LIBRARY_PATH
    del dlite_PYTHONPATH
    del dlite_STORAGE_PLUGINS
    del dlite_MAPPING_PLUGINS
    del dlite_PYTHON_STORAGE_PLUGINS
    del dlite_PYTHON_MAPPING_PLUGINS
    del dlite_TEMPLATES
    del dlite_STORAGES
    del _dlite_use_build_root_for_testing

del is_conda, is_conda_base

from .dlite import *  # noqa: F401, F403
from .factory import classfactory, objectfactory, instancefactory  # noqa: F401

del sys, os, Path
